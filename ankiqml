#!/usr/bin/python2.6

import sys, os, time, re
sys.path[0] = "/usr/share/ankiqml"

from PySide import QtCore
from PySide.QtGui import *
from PySide.QtCore import *
from PySide.QtDeclarative import QDeclarativeView
from PySide.QtNetwork import QNetworkAccessManager
from PySide.QtNetwork import QNetworkConfigurationManager
from PySide.QtNetwork import QNetworkSession
import anki
from anki.stdmodels import BasicModel
from anki.sync import SyncClient, HttpSyncServerProxy, copyLocalMedia
from anki.db import sqlite

DECKS_PATH="/home/user/MyDocs/Anki/"

class DecksModel(QAbstractListModel):

    NameRole = Qt.UserRole + 1
    PathRole = Qt.UserRole + 2
    FactCountRole = Qt.UserRole + 3
    CardCountRole = Qt.UserRole + 4
    RevCountRole = Qt.UserRole + 5
    NewCountRole = Qt.UserRole + 6

    def __init__(self, parent = None):
        QAbstractListModel.__init__(self, parent)
        self.setRoleNames({
            DecksModel.NameRole : 'deckName',
            DecksModel.PathRole : 'deckPath',
            DecksModel.FactCountRole : 'deckFactCount',
            DecksModel.CardCountRole : 'deckCardCount',
            DecksModel.RevCountRole : 'deckRevCount',
            DecksModel.NewCountRole : 'deckNewCount',
            Qt.DisplayRole : 'display' 
            })
        self._data = []
        self._row_count = 0

    @QtCore.Slot(result=int)
    def count(self):
        return self._row_count

    def rowCount(self, index):
        return len(self._data)

    @QtCore.Slot(int, str, str)
    def setData(self, index, role, value):
        self._data[index][role] = value
        self.emit(QtCore.SIGNAL("dataChanged()"))

    @QtCore.Slot(int, str, result=str)
    def getData(self, index, role):
        d = self._data[index]
        return d[role]

    def data(self, index, role):
        d = self._data[index.row()]

        if role == Qt.DisplayRole:
            return d['name']
        elif role == Qt.DecorationRole:
            return Qt.black
        elif role == DecksModel.NameRole:
            return d['deckName']
        elif role == DecksModel.PathRole:
            return d['deckPath']
        elif role == DecksModel.FactCountRole:
            return d['deckFactCount']
        elif role == DecksModel.CardCountRole:
            return d['deckCardCount']
        elif role == DecksModel.RevCountRole:
            return d['deckRevCount']
        elif role == DecksModel.NewCountRole:
            return d['deckNewCount']
        return None

    @QtCore.Slot()
    def populate(self):
        path=DECKS_PATH
        if not os.path.isdir(path):
            os.mkdir(path)
        dirList=os.listdir(path)
        deckHelper = DeckWrapper()
        del self._data[:]
        self._row_count = 0
        for fname in dirList:
            if fname.endswith(".anki"):
                deckPath = path+'/'+fname 
                deckHelper.openDeck(fname)  
                name = deckHelper.getDeckInfo("name")
                factCount = deckHelper.getDeckInfo("factCount")
                cardCount = deckHelper.getDeckInfo("cardCount")
                revCount = deckHelper.getDeckInfo("revCount")
                newCount = deckHelper.getDeckInfo("newCount")
                self._data.append({'name':fname, 'deckName': name, 'deckPath':deckPath, 'deckFactCount': factCount, 'deckCardCount': cardCount, 'deckRevCount': revCount, 'deckNewCount': newCount})
                self._row_count = self._row_count + 1
                deckHelper.closeDeck()
        self.reset()

class SyncThread(QThread):
    def initialize(self, deckWrapper, user, password):
        self.deckWrapper = deckWrapper
        self.onlyMerge = False
        self.disable = False
        self.user = user
        self.password = password

    def _goOnline(self):
        manager = QNetworkConfigurationManager()
        configuration = manager.defaultConfiguration()
        self.syncSession = QNetworkSession(configuration)
        self.syncSession.open()
        self.syncSession.waitForOpened()
        if manager.isOnline():
            print "Network is accessible"
        else:
            print "Network is NOT accessible"
            return False
        return True
    
    def _goOffline(self):
        self.syncSession.close()
    
    def run(self):
        print "Sync Thread started"
        self.emit(SIGNAL("stateChanged(QString)"), "Connecting")
        sqlpath = self.deckWrapper.path.encode("utf-8")
        c = sqlite.connect(sqlpath)
        (syncName, localMod, localSync) = c.execute(
                    "select syncName, modified, lastSync from decks").fetchone()
        c.close()
        if not syncName:
            print "SyncName not specified"
            return -2
        syncName = os.path.splitext(os.path.basename(self.deckWrapper.path))[0]
        if not self._goOnline():
            self.emit(SIGNAL("stateChanged(QString)"), "")
            return
        proxy = HttpSyncServerProxy(self.user, self.password)
        proxy.connect("ankiqml-1.0")
        self.emit(SIGNAL("stateChanged(QString)"), "Syncing")
        if proxy.timediff > 300:
            print "Time Diff is too high"
            self.emit(SIGNAL("stateChanged(QString)"), "")
            return
        if proxy.hasDeck(syncName):
            print "Deck exists on the server"
        else:
            print "Deck doesn't exits on the server"
            proxy.createDeck(syncName)
        proxy.deckName = syncName
        remoteMod = proxy.modified()
        remoteSync = proxy._lastSync()
        minSync = min(localSync, remoteSync)
        self.conflictResolution = None
        if (localMod != remoteMod and minSync > 0 and
            localMod > minSync and remoteMod > minSync):
            self.emit(SIGNAL("syncConflicts"), syncName)
            while not self.conflictResolution:
                time.sleep(0.2)
            if self.conflictResolution == "cancel":
                # alert we're finished early
                self.emit(SIGNAL("syncFinished"))
                return -1
        self.deck = anki.DeckStorage.Deck(self.deckWrapper.path)
        client = SyncClient(self.deck)
        client.setServer(proxy)

        start = time.time()
        if client.prepareSync(proxy.timediff):
            if self.deck.lastSync <= 0:
                if client.remoteTime > client.localTime:
                    self.conflictResolution = "keepRemote"
                else:
                    self.conflictResolution = "keepLocal"
            changes = True
            if not self.conflictResolution and not self.onlyMerge:
                    print "Fetching summary from server..."
                    sums = client.summaries()
            if (self.conflictResolution or
                self.onlyMerge or client.needFullSync(sums)):
                print "Preparing full sync..."
                if self.conflictResolution == "keepLocal":
                    client.remoteTime = 0
                elif self.conflictResolution == "keepRemote" or self.onlyMerge:
                    client.localTime = 0
                lastSync = self.deck.lastSync
                ret = client.prepareFullSync()
                if ret[0] == "fromLocal":
                    if not self.conflictResolution:
                        if lastSync <= 0 and not deckCreated:
                            self.clobberChoice = None
                            self.emit(SIGNAL("syncClobber"), syncName)
                            while not self.clobberChoice:
                                time.sleep(0.2)
                            if self.clobberChoice == "cancel":
                                # disable syncing on this deck
                                c = sqlite.connect(sqlpath)
                                c.execute(
                                    "update decks set syncName = null, "
                                    "lastSync = 0")
                                c.commit()
                                c.close()
                                if not deck:
                                    # alert we're finished early
                                    self.emit(SIGNAL("syncFinished"))
                                return True
                    print "Uploading..."
                    client.fullSyncFromLocal(ret[1], ret[2])
                else:
                    print "Downloading..."
                    client.fullSyncFromServer(ret[1], ret[2])
                print "Sync complete."
            else:
                # diff
                print "Determining differences..."
                payload = client.genPayload(sums)
                # send payload
                if not deck:
                    pr = client.payloadChangeReport(payload)
                    print "<br>" + pr + "<br>"
                print "Transferring payload..."
                res = client.server.applyPayload(payload)
                # apply reply
                print "Applying reply..."
                client.applyPayloadReply(res)
                # now that both sides have successfully applied, tell
                # server to save, then save local
                client.server.finish()
                self.deck.lastLoaded = self.deck.modified
                self.deck.s.commit()
                print "Sync complete."
        else:
            changes = False
            if self.disable:
                print "Disabled by upgrade."
            elif not self.deck:
                print "No changes found."

        self._goOffline()
        self.deck.close()
        self.emit(SIGNAL("stateChanged(QString)"), "finished")

class DeckWrapper(QtCore.QObject):

    def __init__(self, parent = None):
        QtCore.QObject.__init__(self, parent)
        self.opened = False
        self.finished = False

    def __del__(self, parent = None):
        self.stopSession()
        self.closeDeck()

    @QtCore.Slot(str)
    def openDeck(self, name):
        self.path = self._pathFromName(name)
        self.name = name
        self.deck = anki.DeckStorage.Deck(self.path, backup=False)
        self.opened = True
        self.syncName = self.deck.syncName

    @QtCore.Slot()
    def closeDeck(self):
        if not self.opened:
            return
        self.deck.save()
        self.deck.s.flush()
        self.deck.close()
        self.opened = False

    @QtCore.Slot()
    def startSession(self):
        self.deck.startSession()
        
    @QtCore.Slot()
    def stopSession(self):
        if  not self.opened:
            return
        self.deck.stopSession()
        self.finished = False

    @QtCore.Slot()
    def getCard(self):
        if not self.opened:
            return
        self.deck.mediaDir()
        self.card = self.deck.getCard()
        if not self.card:
            self.finished = True

    def getCss(self):
        # Strip font-size from css
        css = re.sub("font-size:.*px;", "", self.deck.css)
        return "<style>"+css+"</style>"

    @QtCore.Slot(result=str)
    def getQuestion(self):
        if not self.opened:
            return ""
        return self.getCss() + self.card.htmlQuestion()

    @QtCore.Slot(result=str)
    def getAnswer(self):
        if not self.opened:
            return ""
        return self.getCss() + self.card.htmlAnswer()

    @QtCore.Slot(int)
    def answerCard(self, quality):
        if not self.opened:
            return
        self.deck.s.refresh(self.card)
        self.deck.s.refresh(self.card.fact)
        self.deck.s.refresh(self.card.cardModel)
        self.deck.s.expunge(self.card)

        self.deck.answerCard(self.card, quality)

    @QtCore.Slot(result=bool)
    def Finished(self):
        return self.finished

    @QtCore.Slot(result=str)
    def DeckFinishedMsg(self):
        if self.finished:
            return self.deck.deckFinishedMsg()

    @QtCore.Slot(str, result=str)
    def getDeckInfo(self, key):
        if self.opened == False:
            return ""
        self.deckInfo = {
            "name": self.deck.name(),
            "description": `self.deck.description`,
            "cardCount": `self.deck.cardCount`,
            "factCount": `self.deck.factCount`,
            "revCount": `self.deck.failedSoonCount + self.deck.revCount`,
            "newCount": `self.deck.newCountToday`,
        }
        return self.deckInfo.get(key, "")

    @QtCore.Slot(result="QVariantMap")
    def getStats(self):
        self.stats = self.deck.getStats()
        return self.stats

    @QtCore.Slot(result="QVariantList")
    def CurrentModelFields(self):
        fields = []
        model = self.deck.currentModel
        for fieldModel in model.fieldModels:
            fields.append(fieldModel.name)
        return fields

    def _updateFact(self, fact, map):
        for i in range(0, len(map.keys())):
            fact.__setitem__(map.keys()[i], map.values()[i])
        if self.deck.factIsInvalid(fact):
            return False
        return True

    @QtCore.Slot("QVariantMap", result=bool)
    def AddFact(self, map):
        if self.opened == False:
            return False

        fact = self.deck.newFact()
        self._updateFact(fact, map)
        self.deck.addFact(fact)
        self._reset()

        return True

    @QtCore.Slot(str, result=str)
    def getFactInfo(self, key):
        if self.opened == False:
            return ""
        self.factInfo = {
            "id": `self.card.fact.id`,
        }
        return self.factInfo.get(key, "")

    @QtCore.Slot(str, result=str)
    def getFactValue(self, key):
        if self.opened == False:
            return ""
        return self.card.fact.__getitem__(key)

    @QtCore.Slot("QVariantMap", result=bool)
    def EditFact(self, map):
        if self.opened == False:
            return False

        fact = self.card.fact
        self._updateFact(fact, map)
        fact.setModified(textChanged=True, deck=self.deck)
        self.deck.save()
        self.deck.s.refresh(fact)
        self._reset()

        return True

    def _reset(self):
        if self.opened == False:
            return False
        self.deck.refreshSession()
        self.deck.reset()

    @QtCore.Slot(result=bool)
    def deleteCurrentCard(self):
        if self.opened == False:
            return False
        self.deck.deleteCard(self.card.id)
        self._reset()
        return True

    @QtCore.Slot(str)
    def setMode(self, mode):
        if (mode == "cram"):
            self.deck.setupCramScheduler("", "random()")
        elif (mode == "learnMore"):
            self.deck.setupLearnMoreScheduler()
        elif (mode == "reviewEarly"):
            self.deck.setupReviewEarlyScheduler()

    @QtCore.Slot(str, result=bool)
    def addDeck(self, name):
        path = self._pathFromName(name)
        if (os.path.exists(path)):
            return False
        deck = anki.DeckStorage.Deck(path, backup=False)
        deck.addModel(BasicModel())
        deck.save()
        deck.close()
        return True

    def _pathFromName(self, name):
        path = DECKS_PATH + name
        if not name.lower().endswith(".anki"):
            path += ".anki"
        return path

    @QtCore.Slot(str, result=str)
    def getCardInfo(self, key):
        if self.opened == False:
            return ""
        self.cardInfo = {
            "id": `self.card.id`,
            "successive": `self.card.successive`,
        }
        return self.cardInfo.get(key, "")

    @QtCore.Slot(result="QVariantMap")
    def CurrentCardModels(self):
        if self.opened == False:
            return
        print self.deck.currentModel.cardModels[0].name
        return self.deck.currentModel.cardModels

    @QtCore.Slot(result=bool)
    def Sync(self):
        if self.opened == True:
            print "Deck must be closed before sync"
            return False
        self.syncThread = SyncThread(self)
        settings = Settings()
        self.syncUser = settings.GetValue("Sync/Username") 
        self.syncPassword = settings.GetValue("Sync/Password")
        self.syncThread.initialize(self, self.syncUser, self.syncPassword)
        self.connect(self.syncThread, SIGNAL("stateChanged(QString)"), self.QMLRoot.updateSyncProgress)
        self.syncThread.start()
        return True

    def _goOnline(self):
        manager = QNetworkConfigurationManager()
        configuration = manager.defaultConfiguration()
        self.syncSession = QNetworkSession(configuration)
        self.syncSession.open()
        self.syncSession.waitForOpened()
        if manager.isOnline():
            print "Network is accessible"
        else:
            print "Network is NOT accessible"
            return False
        return True
    
    def _goOffline(self):
        self.syncSession.close()

    @QtCore.Slot()
    def getPersonalDecks(self):
        if not self._goOnline():
            self.emit(SIGNAL("stateChanged(QString)"), "")
            return
        settings = Settings()
        self.syncUser = settings.GetValue("Sync/Username") 
        self.syncPassword = settings.GetValue("Sync/Password")
        proxy = HttpSyncServerProxy(self.syncUser, self.syncPassword)
        proxy.connect("ankiqml-1.0")
        self.personalDecks.populate(proxy.availableDecks())

class Settings(QtCore.QObject):
    def __init__(self, parent = None):
        QtCore.QObject.__init__(self, parent)
        QCoreApplication.setOrganizationName("divan")
        QCoreApplication.setApplicationName("AnkiQML")
        self.settings = QSettings()

    @QtCore.Slot(str, str)
    def SetValue(self, key, value):
        self.settings.setValue(key, value)
        self.settings.sync()

    @QtCore.Slot(str, result=str)
    def GetValue(self, key):
        return self.settings.value(key)

class PersonalDecksModel(QAbstractListModel):

    NameRole = Qt.UserRole + 1

    def __init__(self, parent = None):
        QAbstractListModel.__init__(self, parent)
        self.setRoleNames({
            DecksModel.NameRole : 'Name',
            Qt.DisplayRole : 'display' 
            })
        self._data = []
        self._row_count = 0

    def rowCount(self, index):
        return len(self._data)

    @QtCore.Slot(int, str, str)
    def setData(self, index, role, value):
        self._data[index][role] = value
        self.emit(QtCore.SIGNAL("dataChanged()"))

    @QtCore.Slot(int, str, result=str)
    def getData(self, index, role):
        d = self._data[index]
        return d[role]

    def data(self, index, role):
        d = self._data[index.row()]

        if role == Qt.DisplayRole:
            return d['name']
        elif role == Qt.DecorationRole:
            return Qt.black
        elif role == DecksModel.NameRole:
            return d['Name']
        return None

    def populate(self, decks):
        del self._data[:]
        self._row_count = 0
        for deckName in decks:
            self._data.append({'name': deckName, 'Name': deckName})
            self._row_count = self._row_count + 1
        self.reset()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    view = QDeclarativeView()
    url = QUrl('/usr/share/ankiqml/qml/view.qml')

    decksModel = DecksModel()
    personalDecksModel = PersonalDecksModel()
    deck = DeckWrapper()
    settings = Settings()

    ctx = view.rootContext()
    ctx.setContextProperty('Deck', deck)
    ctx.setContextProperty('Settings', settings)
    ctx.setContextProperty('decksModel', decksModel)
    ctx.setContextProperty('personalDecksModel', personalDecksModel)

    view.setResizeMode(QDeclarativeView.SizeRootObjectToView)
    view.setSource(url)

    root = view.rootObject()
    deck.QMLRoot = root
    deck.personalDecks = personalDecksModel

    view.showFullScreen()
    sys.exit(app.exec_())
